쓰레드

Java의 Thread
    JVM에 의해 scheduling 된다. 그러므로 multi-process가 불가능한 구조이므로
    Java Thread에 의해 하나의 JVM에서 여러개의 thread를 가질 수 있다.

    JVM의 구조
            |---Method Area(= CLass Area, Static Area)
     공용   |
     구역   |---Heap Area
        
            |---Stack Area
    개별    |
    thread  |---Native Method Stack Area - 자바 언어를 이외의 다른 언어로 작성된 code
            |
            |---PC Register - JVM에서 관리하는 명령어 주소를 저장



        Thread의 종료
                Main thread나 개별 thread모두 하나의 thread로 취급하므로
                각각 독립적으로 존재한다

                다른 thread를 종료하는 방법으로 2가지가 있다.
                1. interrupt()
                        [주의!!] interrput 신호를 받으면 대상이 되는 thread의 예외처리에서 return을 적어주어야 합니다
                                 아니면 무시하고 thread가 종료되지 않음
                
                2. flag - boolean 변수를 이용하여 끝내는 방법
                        예)
                                boolean flag = true;
                                while(flag){

                                }
                
                다른 thread가 종료할 떄 까지 대기하는 방법
                1. join()
        
        TCP Client와 Server의 채팅
                여러 client를 받아들이기 위해서는 Server에서 multi thread로 clinet를 받아 들인다.
                [주의!!] client의 채팅 송수신을 위해 별도의 thread 2개를 생성해줘야 한다.


Thread 동기화
        thread는 코드 작성순으로 실행되는 것이 아닌 개별적으로 실행되므로 
        데이터 I/O시 동기화가 제대로 되어 있지 않으면 예기치 않은 문제가 발생한다.

        Critical Section (임계 구역) - 둘 이상의 thread가 동시에 메모리에 접근하여 문제가 발생하는 영역 

                [주의!!] 다른 함수에서 주소상 동일한 위치에 있는 변수에 영향을 끼치는지 파악하여야 한다!!
                         이는 기존 객체지향은 코드의 위치에 상관없이 실행이 되지만 thread의 경우 어느 때든
                         영향을 끼칠수 있으므로 항상 주의한다.

                        function(){     thread1이 사용하는 함수     
                                i++;
                        }
                        
                        function2(){    thread2가 사용하는 함수
                                i--;
                        }

                        function1과 function2는 thread1과 thread2가 동시에 사용할 가능성이 있다! 그러므로
                        다음과 같은 방법으로 해결

                        syncrhonized를 method에 사용하면 this 키워드를 통해 동기화 된다.
                        public syncrhonized void function(){
                        }
                        public syncrhonized void function2(){
                        }
                        이 경우 하나의 critical section이 있다.

                        또는

                        public syncrhonized void function(){
                        }
                        Object obj;
                        public syncrhonized void function(){
                                syncrhonized(obj)
                        }
                        이 경우 객체 this와 obj가 있으므로 2개의 critical section이 있다.

                        또는
                        
                        Object obj1;
                        Object obj2;

                        public void function(){
                                syncrhonized(obj1)
                        }
                        public void function(){
                                syncrhonized(obj2)
                        }
                        이 경우 객체 obj1와 obj2가 있으므로 2개의 critical section이 있다.
        

        